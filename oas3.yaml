openapi: 3.0.0
info:
  version: '1.0'
  title: "Gestione Bar"
  description: Gestione Bar Ã¨ un software per facilitare la gestione di una birreria.
  license:
    name: MIT
servers:
  - url: http://localhost:8000/api/v1
    description: Localhost
paths:
  /:
    get:
      description: >-
        Checks the user's credentials and attempt login.
      summary: Attempts login.
      responses:
        '200':
          description: 'User logged in'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '404':
          description: 'User not found'
  /manager:
    get:
      description: >-
        Gets the list of managers.
      summary: Shows the list of all managers.
      responses:
        '200':
          description: 'Collection of manager'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        "400":
          description: "Invalid status value"
  /manager/users:
    post:
      description: >-
          Creates an new user.
      summary: Adds an new user.
      responses:
        '201':
          description: 'User created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
                description: Link to the newly created user.
        "405":
            description: "Invalid input"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
    get:
      description: >-
        Gets the list all users.
      summary: Shows the list all users.
      responses:
        '200':
          description: 'Collection of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
  /manager/users/{userId}:
    get:
        description: >-
          Gets a user.
        summary: Shows an user by his id.
        responses:
          '200':
            description: 'Collection of users'
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Users'
    put:
      description: >-
        Update an user.
      summary: Updates an user by his id.
      responses:
        '201':
          description: 'User created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created user.
        "400":
            description: "Invalid ID supplied"
        "404":
          description: "User not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
    delete:
      description: >-
        Delete an user by his id
      summary: Deletes an user.
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
  /birre:
    get:
      description: >-
        Gets the list all beers.
      summary: Shows the list of all beers.
      responses:
        '200':
          description: 'Collection of beers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beers'
    post:
      description: >-
          Creates a new beer to the database.
      summary: Adds a new beer.
      responses:
        '201':
          description: 'Beer has been created; link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created beer.
        "405":
            description: "Invalid input"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beers'
    put:
      description: >-
        Updates an already existing beer.
      summary: Updates a beer's information.
      responses:
        '201':
          description: 'Beer has been successfully updated.'
        '404':
          description: 'Beer to update not found.'
  /birre/{beerID}:
    get:
      description: >-
        Gets a beer's information.
      summary: Shows a beer by its id.
      responses:
        '200':
          description: 'Collection of beers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beers'
    delete:
      description: >-
        Deletes a beer.
      summary: Deletes a beer by its id.
      responses:
        '200':
          description: 'Beer has been successfully deleted.'
        '404':
          description: 'Beer to delete not found.'
  /birre/nome/{nome}:
    get:
      description: >-
        Gets a beer's information.
      summary: Shows a beer by its name.
      responses:
        '200':
          description: 'Beer with the specific name'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beers'
        '404':
          description: 'Name of the beer not found.'
  /birre/nome/closestMatch/{nome}:
    get:
      description: >-
        Gets the list of beers that contains the string {nome}.
      summary: Shows the list of beers that contains the string passed.
      responses:
        '200':
          description: 'List of beers'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beers'
        '404':
          description: 'Beer not found.'
  /ordinazioni:
    get:
      description: >-
        Gets the list of all the orders not finished yet.
      summary: Shows the list of all orders not already finished.
      responses:
        '200':
          description: 'Collection of orders'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders'
    post:
      description: >-
          Creates a new order to the database.
      summary: Adds a new order.
      responses:
        '201':
          description: 'Order has been created; link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created order.
        "405":
            description: "Invalid input"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
    put:
      description: >-
        Updates an already existing order.
      summary: Updates an order's information.
      responses:
        '201':
          description: 'Order has been successfully updated.'
        '404':
          description: 'Order to update not found.'
    delete:
      description: >-
        Deletes an order.
      summary: Deletes an order by its id.
      responses:
        '200':
          description: 'Order has been successfully deleted.'
        '404':
          description: 'Order to delete not found.'
components:
  schemas:
    Users:
      type: object
      required:
        - id
        - email
        - category
      properties:
        id:
          type: integer
          description: 'ID of the user'
        email:
          type: string
          description: 'Email address of the user'
        category:
          type: string
          description: 'Category of the user'
    Beers:
      type: object
      required:
        - id
        - name
        - img
        - produttore
        - distributore
        - gradazioneAlcolica
        - tempoDiFermentazione
        - gusto
        - calorie
        - colore 
        - ingredienti
      properties:
        id:
          type: integer
          description: 'ID of the beer'
        name:
          type: string
          description: 'Name of the beer'
        img:
          type: string
          description: 'Image of the beer'
        produttore:
          type: string
          description: 'Producer of the beer'
        distributore:
          type: string
          description: 'Dispenser of the beer'
        gradazioneAlcolica:
          type: number
          description: 'Alcoholic grade of the beer'
        tempoDiFermentazione:
          type: integer
          description: 'Fermentation period of the beer'
        gusto:
          type: string
          description: 'Taste of the beer'
        calorie:
          type: string
          description: 'Calories of the beer'
        colore:
          type: string
          description: 'Color of the beer'
        ingredienti:
          type: string
          description: 'Ingredients of the beer'
    Orders:
      type: object
      required:
        - id
        - user
        - table
        - listOfOrders
        - finished
      properties:
        id:
          type: integer
          description: 'ID of the order'
        user:
          type: string
          description: 'Name of the waiter or bartender who has taken the order'
        table:
          type: integer
          description: 'Number used to idetify the table'
        listOfOrders:
          type: array
          items:
            properties:
              beer:
                type: string
                description: 'name of the beer'
              quantity:
                type: number
                description: 'quantity of the beer ordered, expressed in liters'
          description: 'list of beers and quantity ordered'
        finished:
          type: boolean
          description: 'false if the order is not already prepared, true otherwise'